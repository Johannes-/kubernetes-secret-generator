package secret

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"github.com/spf13/viper"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"reflect"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/source"
	"strings"
	"time"
)

var log = logf.Log.WithName("controller_secret")

const (
	SecretGenerateAnnotation    = "secret-generator.v1.mittwald.de/autogenerate"
	SecretGeneratedAtAnnotation = "secret-generator.v1.mittwald.de/autogenerate-generated-at"
	SecretRegenerateAnnotation  = "secret-generator.v1.mittwald.de/regenerate"
	SecretSecureAnnotation      = "secret-generator.v1.mittwald.de/secure"
)

func regenerateInsecure() bool {
	return viper.GetBool("regenerate-insecure")
}

func secretLength() int {
	return viper.GetInt("secret-length")
}

// Add creates a new Secret Controller and adds it to the Manager. The Manager will set fields on the Controller
// and Start it when the Manager is Started.
func Add(mgr manager.Manager) error {
	return add(mgr, newReconciler(mgr))
}

// newReconciler returns a new reconcile.Reconciler
func newReconciler(mgr manager.Manager) reconcile.Reconciler {
	return &ReconcileSecret{client: mgr.GetClient(), scheme: mgr.GetScheme()}
}

// add adds a new Controller to mgr with r as the reconcile.Reconciler
func add(mgr manager.Manager, r reconcile.Reconciler) error {
	// Create a new controller
	c, err := controller.New("secret-controller", mgr, controller.Options{Reconciler: r})
	if err != nil {
		return err
	}

	// Watch for changes to primary resource Secret
	err = c.Watch(&source.Kind{Type: &corev1.Secret{}}, &handler.EnqueueRequestForObject{})
	if err != nil {
		return err
	}

	return nil
}

// blank assignment to verify that ReconcileSecret implements reconcile.Reconciler
var _ reconcile.Reconciler = &ReconcileSecret{}

// ReconcileSecret reconciles a Secret object
type ReconcileSecret struct {
	// This client, initialized using mgr.Client() above, is a split client
	// that reads objects from the cache and writes to the apiserver
	client client.Client
	scheme *runtime.Scheme
}

// Reconcile reads that state of the cluster for a Secret object and makes changes based on the state read
// and what is in the Secret.Spec
// Note:
// The Controller will requeue the Request to be processed again if the returned error is non-nil or
// Result.Requeue is true, otherwise upon completion it will remove the work from the queue.
func (r *ReconcileSecret) Reconcile(request reconcile.Request) (reconcile.Result, error) {
	reqLogger := log.WithValues("Request.Namespace", request.Namespace, "Request.Name", request.Name)
	reqLogger.Info("Reconciling Secret")

	// Fetch the Secret instance
	instance := &corev1.Secret{}
	err := r.client.Get(context.TODO(), request.NamespacedName, instance)
	if err != nil {
		if errors.IsNotFound(err) {
			// Request object not found, could have been deleted after reconcile request.
			// Owned objects are automatically garbage collected. For additional cleanup logic use finalizers.
			// Return and don't requeue
			return reconcile.Result{}, nil
		}
		// Error reading the object - requeue the request.
		return reconcile.Result{}, err
	}

	desired := instance.DeepCopy()

	toGenerate, ok := desired.Annotations[SecretGenerateAnnotation]
	if !ok {
		return reconcile.Result{}, nil
	}

	reqLogger.Info("instance is autogenerated")

	genKeys := strings.Split(toGenerate, ",")

	if err := ensureUniqueness(genKeys); err != nil {
		return reconcile.Result{}, err
	}

	var regenKeys []string
	if _, ok := desired.Annotations[SecretSecureAnnotation]; !ok && regenerateInsecure() {
		reqLogger.Info("instance was generated by cryptographically insecure PNRG")
		regenKeys = genKeys // regenerate all keys
	} else {
		if regenerate, ok := desired.Annotations[SecretRegenerateAnnotation]; ok {
			reqLogger.Info("removing regenerate annotation from instance")
			delete(desired.Annotations, SecretRegenerateAnnotation)

			if regenerate == "yes" {
				regenKeys = genKeys
			} else {
				regenKeys = strings.Split(regenerate, ",") // regenerate requested keys
			}
		}
	}

	if desired.Data == nil {
		desired.Data = make(map[string][]byte)
	}

	generatedCount := 0
	for _, key := range genKeys {
		if len(desired.Data[key]) != 0 && !contains(regenKeys, key) {
			// dont generate key if it already has a value
			// and is not queued for regeneration
			continue
		}
		generatedCount++

		value, err := generateSecret(secretLength())
		if err != nil {
			reqLogger.Error(err, "could not generate new instance")
			return reconcile.Result{RequeueAfter: time.Second * 30}, err
		}

		desired.Data[key] = []byte(value)

		reqLogger.Info("set field of instance to new randomly generated instance", "bytes", len(value), "field", key)
	}
	reqLogger.Info("generated secrets", "count", generatedCount)

	if generatedCount == len(genKeys) {
		// all keys have been generated by this instance
		desired.Annotations[SecretSecureAnnotation] = "yes"
	}

	if !reflect.DeepEqual(instance.Annotations, desired.Annotations) ||
		!reflect.DeepEqual(instance.Data, desired.Data) {
		reqLogger.Info("updating secret")

		desired.Annotations[SecretGeneratedAtAnnotation] = time.Now().String()
		err := r.client.Update(context.Background(), desired)
		if err != nil {
			reqLogger.Error(err, "could not update secret")
			return reconcile.Result{Requeue: true}, err
		}
	}

	return reconcile.Result{}, nil
}

func generateSecret(length int) (string, error) {
	b := make([]byte, length)
	_, err := rand.Read(b)
	if err != nil {
		return "", err
	}

	return base64.StdEncoding.EncodeToString(b)[0:length], nil
}

func contains(s []string, e string) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}
	return false
}

// ensure elements in input array are unique
func ensureUniqueness(a []string) error {
	set := map[string]bool{}
	for _, e := range a {
		if set[e] {
			return fmt.Errorf("duplicate element %s found", e)
		}
		set[e] = true
	}
	return nil
}
